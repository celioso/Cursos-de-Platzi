# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: celiscorp
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: aprendiendo-serverless
# "service" is the name of this project. This will also be added to your AWS resource names.
service: crud-serverless-course

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  httpApi:
    authorizers:
      custom-authorizer:
        type: request
        functionName: custom-authorizer
        identitySource: $request.header.Authorization
        resultTtlInSeconds: 15
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:Query'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-customerTable-${sls:stage}
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:DeleteObject'
            - 's3:ListBucket'
          Resource: arn:aws:s3:::bucket-serverless-course-54963217/* 
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - Fn::GetAtt: [SQSQueue, Arn]       
  environment:
    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}
    BUCKET: bucket-serverless-course-54963217
    SECRET_EGG: ${ssm:/SECRET_EGG, 'default-secret'}

    SQS_QUEUE_URL:
      Ref: SQSQueue


#plugins:
#  - serverless-offline
#  - serverless-dynamodb-local


package:
  individually: true
  patterns:
    - "!*/**"
    #- "!node_modules/**"
    #- "!.dynamodb/**"
    #- "!.serverless/**"

custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8002
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
      noStart: true

functions:
  custom-authorizer:
    handler: authorizer/handler.authorize
    package:
      patterns:
      - "authorizer/handler.js"

  hello-world:
    handler: hello-world/handler.hello
    package:
      patterns:
      - "hello-world/handler.js"
    events:
      - httpApi:
          path: /hello
          method: GET

  get-users:
    handler: getUsers/handler.getUsers
    package:
      patterns:
      - "getUsers/handler.js"
    events:
      - httpApi:
          path: /users/{id}
          method: GET
          authorizer: custom-authorizer 

  create-users:
    handler: createUsers/handler.createUsers
    package:
      patterns:
      - "createUsers/handler.js"
      - "node_modules/**"  
    events:
      - httpApi:
          path: /users
          method: POST
          
              
  update-users:
    handler: updateUsers/handler.updateUsers
    package:
      patterns:
      - "updateUsers/handler.js"
    events:
      - httpApi:
          path: /users/{id}
          method: PATCH

  delete-users:
    handler: deleteUsers/handler.deleteUsers
    runtime: python3.10
    package:
      patterns:
      - "deleteUsers/handler.py"
    events:
      - httpApi:
          path: /users/{id}
          method: DELETE

  signedURL:
    handler: signedurl/handler.signedS3URL
    package:
      patterns:
      - "signedurl/handler.js"
    events:
      - httpApi:
          path: /signedurl
          method: GET
          #cors: true # Habilita CORS si necesitas acceder desde un navegador

  thumbnailGenerator:
    handler: thumbnail/handler.thumbnailGenerator
    layers:
      - { Ref: BaseLambdaLayer }
    package:
      patterns:
        - "thumbnail/handler.js"
    events:
      - s3:
          bucket: bucket-serverless-course-54963217
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: uploads/
#SQS
  sendToQueue:
    handler: likeuser/handler.likeuser
    events:
      - httpApi:
          path: /likeuser
          method: POST

  processQueue:
    handler: likeuser/handler.processQueue
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SQSQueue, Arn]
# fin SQS
layers:
  base:
    name: "pro-dependencies"
    compatibleRuntimes:
      - "nodejs20.x"
    package:
      artifact: nodejs.zip
      #artifact: app/nodejs.zip

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        TableName: ${self:service}-customerTable-${sls:stage}

    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
        BucketName: bucket-serverless-course-54963217

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - "/*"
# sqs
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: sqs-queue  # este s√≠ es el nombre visible de la cola

  Outputs:
    PublicBucketName:
      Description: "Es un Bucket de serverless"
      Value: !Ref S3Bucket
      Export:
        Name: BucketDePrueba

    PublicBucketArn:
      Description: "The ARN of the public S3 bucket"
      Value: !GetAtt S3Bucket.Arn
      Export:
        Name: PublicBucketArn

    PublicBucketWebsiteURL:
      Description: "The website URL of the public S3 bucket (if configured for website hosting)"
      Value: !GetAtt S3Bucket.WebsiteURL
      Export:
        Name: PublicBucketWebsiteURL

    QueueArn:
      Description: "ARN de la cola SQS"
      Value:
        Fn::GetAtt: [SQSQueue, Arn]
